N8N Installation and configuration using Docker 

1) Install Docker in ubuntu system

Update system
sudo apt update && sudo apt upgrade -y

Install dependencies
sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg

Add Docker's official GPG key
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg

Add Docker's official APT repo
echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Install Docker CE and Compose plugin
sudo apt update
sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin

Enable and start Docker
sudo systemctl enable docker
sudo systemctl start docker

Test Docker
docker --version

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Create n8n Project Directory and file

mkdir ~/n8n
cd ~/n8n
nano .env

N8N_HOST=https://<URL>
N8N_PORT=5678
N8N_PROTOCOL=https

# This tells n8n it is served from a subpath
N8N_PATH=<sub-path-name>

# These must also use the subpath
WEBHOOK_URL=https://<URL>/<Sub-path-URL>/
N8N_EDITOR_BASE_URL=https://<URL>/<Sub-path-URL>/
N8N_API_URL=https://<URL>/<Sub-path-URL>/

# Authentication
N8N_BASIC_AUTH_ACTIVE=true
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=m0N1Y|>d!bkX9>|

# Cookie secure flag (should be true if using HTTPS)
N8N_SECURE_COOKIE=true

# Database config
DB_TYPE=postgresdb
DB_POSTGRESDB_HOST=<database-server-IP>
DB_POSTGRESDB_PORT=5432
DB_POSTGRESDB_DATABASE=<database-name>l
DB_POSTGRESDB_USER=<database-username>
DB_POSTGRESDB_PASSWORD=<database-password>

# Runner
N8N_RUNNERS_ENABLED=true



NOTE: For the above database configuration, create an database with username and password and provide the same details on above file setup

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Create Docker Compose File

nano docker-compose.yml

version: "3.7"

services:
  n8n:
    image: n8nio/n8n
    ports:
      - "5678:5678"
    env_file:
      - .env   # Load ALL variables from .env into the container
    volumes:
      - n8n_data:/home/node/.n8n
      - /root/n8n/custom-nodes:/home/node/.n8n/custom
    restart: unless-stopped

volumes:
  n8n_data:

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5) Start n8n

docker compose up -d

6) Check if it's running:

docker ps

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Configure the NGINX for N8N with subpath name and without subpath name (SSL Required)
Below mentioned without subpath name

server {
  server_name <Sub-Domain>;
  access_log /var/log/nginx/n8n-api-access.log;
  error_log /var/log/nginx/n8n-api-error.log;

  location / {
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://<Server-IP>:5678;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
}
  }



Below mentioned with Subpath name (Add the location above SSL configuration file)

 # n8n served under /sflow/
    location /sflow/ {
        rewrite ^/sflow/(.*)$ /$1 break;
        proxy_pass http://<Server-IP>:5678;
        proxy_http_version 1.1;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
    }

